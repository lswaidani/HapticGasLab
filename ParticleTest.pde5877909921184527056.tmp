// Library imports  //<>// //<>//
import processing.serial.*;
import com.dhchoi.CountdownTimer;
import com.dhchoi.CountdownTimerService;

// Device block definitions 
Device            haply_2DOF;
byte              deviceID              = 5;
Board             haply_board;
boolean           rendering_force       = false;

// Simulation Speed Parameters 
final long        SIMULATION_PERIOD     = 1; //ms
final long        HOUR_IN_MILLIS        = 36000000;
CountdownTimer    haptic_timer;
float             dt                    = SIMULATION_PERIOD/1000.0; 

// generic data for a 2DOF device 
// joint space 
PVector           angles                = new PVector(0, 0);
PVector           torques               = new PVector(0, 0);

/* task space */
PVector           pos_ee                = new PVector(0, 0);
PVector           pos_ee_last           = new PVector(0, 0); 
PVector           f_ee                  = new PVector(0, 0); 

/* Graphic objects */
float             pixelsPerCentimeter   = 40.0; //this is the resolution of my screen divided by the number of centimeters 
FWorld            world; 
FBox              b; 
FPoly             p; 
FCircle           g; 
FCircle           e; 
HVirtualCoupling  s; 
PImage            haply_avatar;  

float             worldWidth            = 16.0;  
float             worldHeight           = 10.0; 


float             edgeTopLeftX          = 0.0; 
float             edgeTopLeftY          = 0.0; 
float             edgeBottomRightX      = worldWidth; 
float             edgeBottomRightY      = worldHeight; 

Particle         myParticle;
GasBody          Gas;

void setup() {
  size(640, 400); // (worldWidth*pixelsPerCentimeter, worldHeight*pixelsPerCentimeter) must input as number
  //InitialiseHapticDevice();

  hAPI_Fisica.init(this); 
  hAPI_Fisica.setScale(pixelsPerCentimeter); 
  world = new FWorld();

  //myParticle = new Particle (2, 7, world);
  Gas = new GasBody(1,50,1,world);

// Setup the Virtual Coupling Contact Rendering Technique
/*
  s= new HVirtualCoupling((1)); 
  s.h_avatar.setDensity(1); 
  s.h_avatar.setFill(255,0,0); 
  s.init(world, edgeTopLeftX+worldWidth/2, edgeTopLeftY+2); 
  haply_avatar = loadImage("../img/Haply_avatar.png"); 
  haply_avatar.resize((int)(hAPI_Fisica.worldToScreen(1)), (int)(hAPI_Fisica.worldToScreen(1)));
  s.h_avatar.attachImage(haply_avatar); 
*/

  world.setGravity((0.0), (0)); //1000 cm/(s^2)
  world.setEdges((edgeTopLeftX), (edgeTopLeftY), (edgeBottomRightX), (edgeBottomRightY)); 
  world.setEdgesRestitution(1.0);
  world.setEdgesFriction(.0);
  
  world.draw();
  
  //haptic_timer = CountdownTimerService.getNewCountdownTimer(this).configure(SIMULATION_PERIOD, HOUR_IN_MILLIS).start();
  
  frameRate(100); 
}

void draw() {
  background(255); 
   
  if(!rendering_force){
    
    //s.drawContactVectors(this); 
    
   }
    world.draw();
    world.drawDebug();  
    world.step(1.0f/100.0f);
}

/**********************************************************************************************************************
 * Haptics simulation event, engages state of physical mechanism, calculates and updates physics simulation conditions
 **********************************************************************************************************************/ 
/*
void onTickEvent(CountdownTimer t, long timeLeftUntilFinish){
  
  rendering_force = true;
   
  /*if (haply_board.data_available()) {
    // GET END-EFFECTOR STATE (TASK SPACE) 
        
    angles.set(haply_2DOF.get_device_angles()); 
    pos_ee.set( haply_2DOF.get_device_position(angles.array()));
    pos_ee.set(pos_ee.copy().mult(100)); 
    
  }

  //s.setToolPosition(edgeTopLeftX+worldWidth/2-(pos_ee).x+1.0, edgeTopLeftY+(pos_ee).y); 
  //s.updateCouplingForce();
 
  //f_ee.set(-s.getVCforceX(), s.getVCforceY());
 
  //f_ee.div(10000); //
  //haply_2DOF.set_device_torques(f_ee.array());
  //torques.set(haply_2DOF.mechanisms.get_torque());
  //haply_2DOF.device_write_torques();
  
  
  world.step(1.0f/1000.0f);
  
  rendering_force = false;
}


void InitialiseHapticDevice() {
  haply_board = new Board(this, Serial.list()[0], 0);
  haply_2DOF = new Device(DeviceType.HaplyTwoDOF, deviceID, haply_board);
}


// Haptic timer reset
void onFinishEvent(CountdownTimer t){
  println("Resetting timer...");
  haptic_timer.reset();
  haptic_timer = CountdownTimerService.getNewCountdownTimer(this).configure(SIMULATION_PERIOD, HOUR_IN_MILLIS).start();
}

*/